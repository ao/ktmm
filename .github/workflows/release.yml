name: Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v3
    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libx11-dev libxtst-dev libxinerama-dev libxrandr-dev libxss-dev libxdo-dev xvfb
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    - name: Run tests
      if: runner.os != 'Linux'
      uses: actions-rs/cargo@v1
      with:
        command: test
    - name: Run tests with xvfb (Linux)
      if: runner.os == 'Linux'
      run: |
        export XVFB_RUNNING=1
        xvfb-run -a cargo test

  build:
    name: Build ${{ matrix.target }}
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: ktmm
            asset_name: ktmm-linux-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: ktmm.exe
            asset_name: ktmm-windows-amd64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: ktmm
            asset_name: ktmm-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: ktmm
            asset_name: ktmm-macos-arm64

    steps:
    - uses: actions/checkout@v3
    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libx11-dev libxtst-dev libxinerama-dev libxrandr-dev libxss-dev libxdo-dev xvfb
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        target: ${{ matrix.target }}
    
    - name: Build (non-Linux)
      if: runner.os != 'Linux'
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --target ${{ matrix.target }}
        
    - name: Build (Linux)
      if: runner.os == 'Linux'
      run: |
        export XVFB_RUNNING=1
        xvfb-run -a cargo build --release --target ${{ matrix.target }}
    
    - name: Prepare artifact
      shell: bash
      run: |
        mkdir -p artifacts
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} artifacts/${{ matrix.asset_name }}
        else
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} artifacts/${{ matrix.asset_name }}
        fi
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: artifacts/${{ matrix.asset_name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v3
    
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
      
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        name: KTMM v${{ env.VERSION }}
        draft: false
        prerelease: false
        files: |
          artifacts/ktmm-linux-amd64/ktmm-linux-amd64
          artifacts/ktmm-windows-amd64.exe/ktmm-windows-amd64.exe
          artifacts/ktmm-macos-x86_64/ktmm-macos-x86_64
          artifacts/ktmm-macos-arm64/ktmm-macos-arm64

  update-formula:
    name: Update Homebrew Formula
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v3
      with:
        ref: main  # Explicitly checkout main branch
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Calculate SHA256 checksums
      run: |
        echo "ARM64_SHA=$(sha256sum artifacts/ktmm-macos-arm64/ktmm-macos-arm64 | awk '{print $1}')" >> $GITHUB_ENV
        echo "X86_64_SHA=$(sha256sum artifacts/ktmm-macos-x86_64/ktmm-macos-x86_64 | awk '{print $1}')" >> $GITHUB_ENV
        
        # Download source tarball and calculate its SHA256
        curl -L -o source.tar.gz https://github.com/ao/ktmm/archive/refs/tags/v${VERSION}.tar.gz
        echo "SOURCE_SHA=$(sha256sum source.tar.gz | awk '{print $1}')" >> $GITHUB_ENV
    
    - name: Update Formulas
      run: |
        # Create a Ruby script to update both formulas
        cat > update_formulas.rb << 'EOL'
        #!/usr/bin/env ruby
        
        version = ENV['VERSION']
        arm64_sha = ENV['ARM64_SHA']
        x86_64_sha = ENV['X86_64_SHA']
        source_sha = ENV['SOURCE_SHA']
        
        # Update binary formula
        binary_formula_path = 'Formula/ktmm.rb'
        binary_content = File.read(binary_formula_path)
        
        # Update version
        binary_content.gsub!(/version ".*"/, "version \"#{version}\"")
        
        # Update SHA256 checksums
        binary_content.gsub!(/sha256 ".*"  # arm64/, "sha256 \"#{arm64_sha}\"  # arm64")
        binary_content.gsub!(/sha256 ".*"  # x86_64/, "sha256 \"#{x86_64_sha}\"  # x86_64")
        
        File.write(binary_formula_path, binary_content)
        
        # Update source-based formula
        source_formula_path = 'Formula/ktmm_cask_style.rb'
        if File.exist?(source_formula_path)
          source_content = File.read(source_formula_path)
          
          # Update version in URL
          source_content.gsub!(/url ".*\/v.*\.tar\.gz"/, "url \"https://github.com/ao/ktmm/archive/refs/tags/v#{version}.tar.gz\"")
          
          # Update SHA256 checksum
          source_content.gsub!(/sha256 ".*"/, "sha256 \"#{source_sha}\"")
          
          # Update version in test
          source_content.gsub!(/assert_match "ktmm .*"/, "assert_match \"ktmm #{version}\"")
          
          File.write(source_formula_path, source_content)
        end
        EOL
        
        chmod +x update_formulas.rb
        ruby update_formulas.rb
    
    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
    
    - name: Commit and push changes
      run: |
        git add Formula/ktmm.rb Formula/ktmm_cask_style.rb
        git commit -m "Update formulas for v${{ env.VERSION }}"
        git push origin main